
7Segment using Switch Debouncer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000c8  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000571  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000213  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
						0b01111111,// digit 8
						0b01101111 };// digit 9

int main(void)
{
	DDRA = 0b00000000;// PA0-PA7 are Input
  82:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b01111111;// PC0-PC6 are OUTPUT for 7 segment
  84:	8f e7       	ldi	r24, 0x7F	; 127
  86:	84 bb       	out	0x14, r24	; 20
	int count = 0;
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
	while (1) 
    {
		if (PINA & (0b00000001))
  8c:	c8 9b       	sbis	0x19, 0	; 25
  8e:	07 c0       	rjmp	.+14     	; 0x9e <main+0x1c>
		{
			while (PINA & (0b00000001))
  90:	c8 99       	sbic	0x19, 0	; 25
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0xe>
			{
				// wait here till button is released
			}
			if (count == 9)
  94:	89 30       	cpi	r24, 0x09	; 9
  96:	91 05       	cpc	r25, r1
  98:	51 f0       	breq	.+20     	; 0xae <main+0x2c>
				count = 0;
			else
				count = count + 1;
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <main+0x36>
		}
		else if (PINA & (0b10000000))
  9e:	cf 9b       	sbis	0x19, 7	; 25
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <main+0x36>
		{
			while (PINA & (0b10000000))
  a2:	cf 99       	sbic	0x19, 7	; 25
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x20>
			{
				// wait here till button is released
			}
			if (count == 0)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	29 f0       	breq	.+10     	; 0xb4 <main+0x32>
				count = 9;
			else
				count = count - 1;
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	05 c0       	rjmp	.+10     	; 0xb8 <main+0x36>
			while (PINA & (0b00000001))
			{
				// wait here till button is released
			}
			if (count == 9)
				count = 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x36>
			while (PINA & (0b10000000))
			{
				// wait here till button is released
			}
			if (count == 0)
				count = 9;
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	90 e0       	ldi	r25, 0x00	; 0
			else
				count = count - 1;
		}
		PORTC = segment[count];
  b8:	fc 01       	movw	r30, r24
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	20 81       	ld	r18, Z
  c0:	25 bb       	out	0x15, r18	; 21
    }
  c2:	e4 cf       	rjmp	.-56     	; 0x8c <main+0xa>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>


7Segment using Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ac  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e8  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
						0b01111111,// digit 8
						0b01101111 };// digit 9

int main(void)
{
	DDRA = 0b00000000;// PA0-PA7 are Input
  82:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b01111111;// PC0-PC6 are OUTPUT for 7 segment
  84:	8f e7       	ldi	r24, 0x7F	; 127
  86:	84 bb       	out	0x14, r24	; 20
	int count = 0;
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
	while (1) 
    {
		if (PINA & (0b00000001))
  8c:	c8 9b       	sbis	0x19, 0	; 25
  8e:	11 c0       	rjmp	.+34     	; 0xb2 <main+0x30>
		{
			if (count == 9)
  90:	89 30       	cpi	r24, 0x09	; 9
  92:	91 05       	cpc	r25, r1
  94:	11 f0       	breq	.+4      	; 0x9a <main+0x18>
				count = 0;
			else
				count = count + 1;
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x1c>
	while (1) 
    {
		if (PINA & (0b00000001))
		{
			if (count == 9)
				count = 0;
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	32 e5       	ldi	r19, 0x52	; 82
  a2:	47 e0       	ldi	r20, 0x07	; 7
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	40 40       	sbci	r20, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2c>
  ae:	00 00       	nop
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <main+0x52>
			else
				count = count + 1;
			_delay_ms(300);
		}
		else if (PINA & (0b10000000))
  b2:	cf 9b       	sbis	0x19, 7	; 25
  b4:	0f c0       	rjmp	.+30     	; 0xd4 <main+0x52>
		{
			if (count == 0)
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	11 f0       	breq	.+4      	; 0xbe <main+0x3c>
				count = 9;
			else
				count = count - 1;
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x40>
			_delay_ms(300);
		}
		else if (PINA & (0b10000000))
		{
			if (count == 0)
				count = 9;
  be:	89 e0       	ldi	r24, 0x09	; 9
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	32 e5       	ldi	r19, 0x52	; 82
  c6:	47 e0       	ldi	r20, 0x07	; 7
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	40 40       	sbci	r20, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x46>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x50>
  d2:	00 00       	nop
			else
				count = count - 1;
			_delay_ms(300);
		}
		PORTC = segment[count];
  d4:	fc 01       	movw	r30, r24
  d6:	e0 5a       	subi	r30, 0xA0	; 160
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	20 81       	ld	r18, Z
  dc:	25 bb       	out	0x15, r18	; 21
    }
  de:	d6 cf       	rjmp	.-84     	; 0x8c <main+0xa>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

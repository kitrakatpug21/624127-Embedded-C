
7SegmentMatrix Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bb  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	// sevenSeg  .gfedcba
	DDRC = 0b01111111;
  80:	8f e7       	ldi	r24, 0x7F	; 127
  82:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00001111;
  84:	9f e0       	ldi	r25, 0x0F	; 15
  86:	91 bb       	out	0x11, r25	; 17
	
	uint8_t segment[10];
	segment[0] = 0b00111111;// digit 0
  88:	9f e3       	ldi	r25, 0x3F	; 63
  8a:	99 83       	std	Y+1, r25	; 0x01
	segment[1] = 0b00000110;// digit 1
  8c:	96 e0       	ldi	r25, 0x06	; 6
  8e:	9a 83       	std	Y+2, r25	; 0x02
	segment[2] = 0b01011011;// digit 2
  90:	9b e5       	ldi	r25, 0x5B	; 91
  92:	9b 83       	std	Y+3, r25	; 0x03
	segment[3] = 0b01001111;// digit 3
  94:	9f e4       	ldi	r25, 0x4F	; 79
  96:	9c 83       	std	Y+4, r25	; 0x04
	segment[4] = 0b01100110;// digit 4
  98:	96 e6       	ldi	r25, 0x66	; 102
  9a:	9d 83       	std	Y+5, r25	; 0x05
	segment[5] = 0b01101101;// digit 5
  9c:	9d e6       	ldi	r25, 0x6D	; 109
  9e:	9e 83       	std	Y+6, r25	; 0x06
	segment[6] = 0b01111101;// digit 6
  a0:	9d e7       	ldi	r25, 0x7D	; 125
  a2:	9f 83       	std	Y+7, r25	; 0x07
	segment[7] = 0b00000111;// digit 7
  a4:	97 e0       	ldi	r25, 0x07	; 7
  a6:	98 87       	std	Y+8, r25	; 0x08
	segment[8] = 0b01111111;// digit 8
  a8:	89 87       	std	Y+9, r24	; 0x09
	segment[9] = 0b01101111;// digit 9
  aa:	8f e6       	ldi	r24, 0x6F	; 111
  ac:	8a 87       	std	Y+10, r24	; 0x0a
	
	while (1)
	{
		for (int hund = 0; hund <= 9; hund = hund + 1)
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	48 c0       	rjmp	.+144    	; 0x144 <main+0xd8>
			{
				for (int ones = 0; ones <= 9; ones = ones + 1)
				{
					for (int cycle=0; cycle <10; cycle = cycle + 1)
					{
						PORTD = 0b00001110;
  b4:	2e e0       	ldi	r18, 0x0E	; 14
  b6:	22 bb       	out	0x12, r18	; 18
						PORTC = segment[ones];
  b8:	e1 e0       	ldi	r30, 0x01	; 1
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ec 0f       	add	r30, r28
  be:	fd 1f       	adc	r31, r29
  c0:	e4 0f       	add	r30, r20
  c2:	f5 1f       	adc	r31, r21
  c4:	20 81       	ld	r18, Z
  c6:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	ef e1       	ldi	r30, 0x1F	; 31
  ca:	fe e4       	ldi	r31, 0x4E	; 78
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x60>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
						_delay_ms(10);
						PORTD = 0b00001101;
  d4:	2d e0       	ldi	r18, 0x0D	; 13
  d6:	22 bb       	out	0x12, r18	; 18
						PORTC = segment[tens];
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	e6 0f       	add	r30, r22
  e2:	f7 1f       	adc	r31, r23
  e4:	20 81       	ld	r18, Z
  e6:	25 bb       	out	0x15, r18	; 21
  e8:	ef e1       	ldi	r30, 0x1F	; 31
  ea:	fe e4       	ldi	r31, 0x4E	; 78
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x80>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
						_delay_ms(10);
						PORTD = 0b00001011;
  f4:	2b e0       	ldi	r18, 0x0B	; 11
  f6:	22 bb       	out	0x12, r18	; 18
						PORTC = segment[hund];
  f8:	e1 e0       	ldi	r30, 0x01	; 1
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	ec 0f       	add	r30, r28
  fe:	fd 1f       	adc	r31, r29
 100:	ea 0f       	add	r30, r26
 102:	fb 1f       	adc	r31, r27
 104:	20 81       	ld	r18, Z
 106:	25 bb       	out	0x15, r18	; 21
 108:	ef e1       	ldi	r30, 0x1F	; 31
 10a:	fe e4       	ldi	r31, 0x4E	; 78
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0xa0>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
		{
			for (int tens = 0; tens <= 9; tens = tens + 1)
			{
				for (int ones = 0; ones <= 9; ones = ones + 1)
				{
					for (int cycle=0; cycle <10; cycle = cycle + 1)
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0xb0>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	8a 30       	cpi	r24, 0x0A	; 10
 11e:	91 05       	cpc	r25, r1
 120:	4c f2       	brlt	.-110    	; 0xb4 <main+0x48>
	{
		for (int hund = 0; hund <= 9; hund = hund + 1)
		{
			for (int tens = 0; tens <= 9; tens = tens + 1)
			{
				for (int ones = 0; ones <= 9; ones = ones + 1)
 122:	4f 5f       	subi	r20, 0xFF	; 255
 124:	5f 4f       	sbci	r21, 0xFF	; 255
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0xc0>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	4a 30       	cpi	r20, 0x0A	; 10
 12e:	51 05       	cpc	r21, r1
 130:	9c f3       	brlt	.-26     	; 0x118 <main+0xac>
	
	while (1)
	{
		for (int hund = 0; hund <= 9; hund = hund + 1)
		{
			for (int tens = 0; tens <= 9; tens = tens + 1)
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	02 c0       	rjmp	.+4      	; 0x13c <main+0xd0>
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	6a 30       	cpi	r22, 0x0A	; 10
 13e:	71 05       	cpc	r23, r1
 140:	9c f3       	brlt	.-26     	; 0x128 <main+0xbc>
	segment[8] = 0b01111111;// digit 8
	segment[9] = 0b01101111;// digit 9
	
	while (1)
	{
		for (int hund = 0; hund <= 9; hund = hund + 1)
 142:	11 96       	adiw	r26, 0x01	; 1
 144:	aa 30       	cpi	r26, 0x0A	; 10
 146:	b1 05       	cpc	r27, r1
 148:	bc f3       	brlt	.-18     	; 0x138 <main+0xcc>
 14a:	b1 cf       	rjmp	.-158    	; 0xae <main+0x42>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>

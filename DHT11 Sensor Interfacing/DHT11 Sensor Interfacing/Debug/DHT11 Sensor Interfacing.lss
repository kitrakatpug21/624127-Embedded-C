
DHT11 Sensor Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000a0  008000a0  00000a26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd4  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070f  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004dc  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000023d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000499  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8a:	0c 94 a7 04 	jmp	0x94e	; 0x94e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Receive_data>:
}
uint8_t c=0, I_RH,D_RH,I_Temp,D_Temp,CheckSum;
int Receive_data()
{
	// Data is Returned in 8 bit format, so
	for (int q=0; q<8; q++)
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	19 c0       	rjmp	.+50     	; 0xca <Receive_data+0x38>
	{
		while((PINB & (0b00000010)) == 0);  /* check received bit 0 or 1 */
  98:	b1 9b       	sbis	0x16, 1	; 22
  9a:	fe cf       	rjmp	.-4      	; 0x98 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	80 e5       	ldi	r24, 0x50	; 80
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <Receive_data+0xc>
		_delay_us(30);
		if (PINB & (0b00000010))
  a2:	b1 9b       	sbis	0x16, 1	; 22
  a4:	09 c0       	rjmp	.+18     	; 0xb8 <Receive_data+0x26>
		{
			// if high pulse is greater than 30ms then its logic HIGH 
			c = (c<<1)|(0x01);
  a6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <Receive_data+0x30>
		}
		else
		{			
			// otherwise its logic LOW
			c = (c<<1);
  b8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  bc:	88 0f       	add	r24, r24
  be:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		}
		while(PINB & (0b00000010))
  c2:	b1 99       	sbic	0x16, 1	; 22
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <Receive_data+0x30>
}
uint8_t c=0, I_RH,D_RH,I_Temp,D_Temp,CheckSum;
int Receive_data()
{
	// Data is Returned in 8 bit format, so
	for (int q=0; q<8; q++)
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	24 f3       	brlt	.-56     	; 0x98 <Receive_data+0x6>
		{
			// wait until the signal is processed
		}
	}
	// once the 8 bits are received, return to the main function
	return c;
  d0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
}
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <lcd_config>:

void lcd_config(uint8_t cmd)
{
	// FIRST PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | (cmd & 0xF0);// msb will load first
  d8:	95 b3       	in	r25, 0x15	; 21
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	28 2f       	mov	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	92 2b       	or	r25, r18
  e2:	95 bb       	out	0x15, r25	; 21
	//2. Set RS Pin to 0
	PORTC = PORTC & ~(0b00000001);	// Set RS Pin to 0
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	9e 7f       	andi	r25, 0xFE	; 254
  e8:	95 bb       	out	0x15, r25	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	ef ec       	ldi	r30, 0xCF	; 207
  f2:	f7 e0       	ldi	r31, 0x07	; 7
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_config+0x1c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_config+0x22>
  fa:	00 00       	nop
	_delay_ms(1);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	9d 7f       	andi	r25, 0xFD	; 253
 100:	95 bb       	out	0x15, r25	; 21
 102:	ef ec       	ldi	r30, 0xCF	; 207
 104:	f7 e0       	ldi	r31, 0x07	; 7
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_config+0x2e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_config+0x34>
 10c:	00 00       	nop
	_delay_ms(1);
	// SECOND PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | ((cmd<<4) & 0xF0);// lsb will load first
 10e:	25 b3       	in	r18, 0x15	; 21
 110:	f0 e1       	ldi	r31, 0x10	; 16
 112:	8f 9f       	mul	r24, r31
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	92 2f       	mov	r25, r18
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	89 2b       	or	r24, r25
 11e:	85 bb       	out	0x15, r24	; 21
	//2. Set RS Pin to 0
	PORTC = PORTC & ~(0b00000001);	// Set RS Pin to 0
 120:	85 b3       	in	r24, 0x15	; 21
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	85 bb       	out	0x15, r24	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
 126:	85 b3       	in	r24, 0x15	; 21
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	8f ec       	ldi	r24, 0xCF	; 207
 12e:	97 e0       	ldi	r25, 0x07	; 7
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_config+0x58>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_config+0x5e>
 136:	00 00       	nop
	_delay_ms(1);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	ef ec       	ldi	r30, 0xCF	; 207
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_config+0x6a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_config+0x70>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <lcd_character>:
}
void lcd_character(char ch)
{
	// FIRST PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | (ch & 0xF0);// msb will load first
 14c:	95 b3       	in	r25, 0x15	; 21
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	28 2f       	mov	r18, r24
 152:	20 7f       	andi	r18, 0xF0	; 240
 154:	92 2b       	or	r25, r18
 156:	95 bb       	out	0x15, r25	; 21
	//2. Set RS Pin to 1
	PORTC = PORTC | 0b00000001;	// Set RS Pin to 1
 158:	95 b3       	in	r25, 0x15	; 21
 15a:	91 60       	ori	r25, 0x01	; 1
 15c:	95 bb       	out	0x15, r25	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
 15e:	95 b3       	in	r25, 0x15	; 21
 160:	92 60       	ori	r25, 0x02	; 2
 162:	95 bb       	out	0x15, r25	; 21
 164:	ef ec       	ldi	r30, 0xCF	; 207
 166:	f7 e0       	ldi	r31, 0x07	; 7
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_character+0x1c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_character+0x22>
 16e:	00 00       	nop
	_delay_ms(1);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
 170:	95 b3       	in	r25, 0x15	; 21
 172:	9d 7f       	andi	r25, 0xFD	; 253
 174:	95 bb       	out	0x15, r25	; 21
 176:	ef ec       	ldi	r30, 0xCF	; 207
 178:	f7 e0       	ldi	r31, 0x07	; 7
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_character+0x2e>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_character+0x34>
 180:	00 00       	nop
	_delay_ms(1);
	// SECOND PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | ((ch<<4) & 0xF0);// lsb will load first
 182:	25 b3       	in	r18, 0x15	; 21
 184:	f0 e1       	ldi	r31, 0x10	; 16
 186:	8f 9f       	mul	r24, r31
 188:	c0 01       	movw	r24, r0
 18a:	11 24       	eor	r1, r1
 18c:	92 2f       	mov	r25, r18
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	89 2b       	or	r24, r25
 192:	85 bb       	out	0x15, r24	; 21
	//2. Set RS Pin to 1
	PORTC = PORTC | 0b00000001;	// Set RS Pin to 1
 194:	85 b3       	in	r24, 0x15	; 21
 196:	81 60       	ori	r24, 0x01	; 1
 198:	85 bb       	out	0x15, r24	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	8f ec       	ldi	r24, 0xCF	; 207
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_character+0x58>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_character+0x5e>
 1aa:	00 00       	nop
	_delay_ms(1);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	ef ec       	ldi	r30, 0xCF	; 207
 1b4:	f7 e0       	ldi	r31, 0x07	; 7
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_character+0x6a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_character+0x70>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <lcd_setup>:
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	82 e5       	ldi	r24, 0x52	; 82
 1c4:	97 e0       	ldi	r25, 0x07	; 7
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <lcd_setup+0x6>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_setup+0x10>
 1d0:	00 00       	nop
void lcd_setup()
{
	//1. Wait for 300ms to let LCD turn ON
	_delay_ms(300);
	//2. Set the LCD mode to 4-bit 16 character and 2 rows
	lcd_config(0x33);
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	lcd_config(0x32);
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	lcd_config(0x28);
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	//16x1 -> 0x30
	//3. Set the Writing Style (Left -> Right)
	lcd_config(0x06);
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	// Right-> Left  0x04
	//4. Set the Cursor Style (a. Solid, b. Blinking, c. OFF)
	lcd_config(0x0E);
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	// 0x0E -> Solid
	// 0x0F -> Blinking
	// 0x0C -> OFF
	//5. Clear the garbage values on LCD Screen
	lcd_config(0x01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	//6. Set the Home Location
	lcd_config(0x80);
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
 1fc:	08 95       	ret

000001fe <lcd_print>:
}

void lcd_print(char *data)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
	while (*data != '\0')
 204:	03 c0       	rjmp	.+6      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
	{
		lcd_character(*data);
 206:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_character>
		data++;
 20a:	21 96       	adiw	r28, 0x01	; 1
	lcd_config(0x80);
}

void lcd_print(char *data)
{
	while (*data != '\0')
 20c:	88 81       	ld	r24, Y
 20e:	81 11       	cpse	r24, r1
 210:	fa cf       	rjmp	.-12     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
	{
		lcd_character(*data);
		data++;
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <Request>:
void lcd_setup();
void lcd_print(char *data);
void Request()
{
	//1. Micro-controller send start pulse/request
	DDRB = 0xFF;			// Set the PA1 Pin as output
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(0b00000010);		// set to low pin
 21c:	88 b3       	in	r24, 0x18	; 24
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	88 bb       	out	0x18, r24	; 24
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	9c e9       	ldi	r25, 0x9C	; 156
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <Request+0xe>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <Request+0x14>
 22c:	00 00       	nop
	_delay_ms(20);				// wait for 20ms 
	PORTB |= (0b00000010);		// set to high pin	
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	82 60       	ori	r24, 0x02	; 2
 232:	88 bb       	out	0x18, r24	; 24
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9c e9       	ldi	r25, 0x9C	; 156
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <Request+0x20>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <Request+0x26>
 23e:	00 00       	nop
	_delay_ms(20);				// wait for 20ms
	PORTB &= ~(0b00000010);		// set to low pin
 240:	88 b3       	in	r24, 0x18	; 24
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	88 bb       	out	0x18, r24	; 24
 246:	8f e3       	ldi	r24, 0x3F	; 63
 248:	9c e9       	ldi	r25, 0x9C	; 156
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <Request+0x32>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <Request+0x38>
 250:	00 00       	nop
	_delay_ms(20);
	lcd_config(0xC0);
 252:	80 ec       	ldi	r24, 0xC0	; 192
 254:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	lcd_print("Request Done");
 258:	80 e6       	ldi	r24, 0x60	; 96
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
 260:	08 95       	ret

00000262 <Response>:
{
	//1. receive response from DHT11 Sensor
	//In order to receive a signal, the DHT Sensor returns a signal like 
	//	1 - 0 - 1
	//Once this frame is received, means data incoming is started
	DDRB &= ~(0b00000010);			// Set the PA1 Pin as input
 262:	87 b3       	in	r24, 0x17	; 23
 264:	8d 7f       	andi	r24, 0xFD	; 253
 266:	87 bb       	out	0x17, r24	; 23
	while(PINB & (0b00000010))
 268:	b1 99       	sbic	0x16, 1	; 22
 26a:	fe cf       	rjmp	.-4      	; 0x268 <Response+0x6>
	{
		// wait until the PA1 pin becomes LOW (return 0 at PA1)
	}
	while((PINB & (0b00000010))==0)
 26c:	b1 9b       	sbis	0x16, 1	; 22
 26e:	fe cf       	rjmp	.-4      	; 0x26c <Response+0xa>
	{
		// wait until the PA1 pin becomes HIGH (return 1 at PA1)
	}
	while(PINB & (0b00000010))
 270:	b1 99       	sbic	0x16, 1	; 22
 272:	fe cf       	rjmp	.-4      	; 0x270 <Response+0xe>
	{
		// wait until the PA1 pin becomes LOW again (return 0 at PA1)
	}
	lcd_config(0xC0);
 274:	80 ec       	ldi	r24, 0xC0	; 192
 276:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
	lcd_print("Response Done");
 27a:	8d e6       	ldi	r24, 0x6D	; 109
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
 282:	08 95       	ret

00000284 <main>:
	// once the 8 bits are received, return to the main function
	return c;
}

int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	a0 97       	sbiw	r28, 0x20	; 32
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0b11001111;// D7..D0
 298:	8f ec       	ldi	r24, 0xCF	; 207
 29a:	84 bb       	out	0x14, r24	; 20
	lcd_setup();
 29c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_setup>
	char humid[16],temp[16];
	while(1)
	{
		Request();				/* send start pulse */
 2a0:	0e 94 0c 01 	call	0x218	; 0x218 <Request>
		Response();				/* receive response */
 2a4:	0e 94 31 01 	call	0x262	; 0x262 <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <Receive_data>
 2ac:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <Receive_data>
 2b4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 2b8:	0e 94 49 00 	call	0x92	; 0x92 <Receive_data>
 2bc:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 2c0:	0e 94 49 00 	call	0x92	; 0x92 <Receive_data>
 2c4:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 2c8:	0e 94 49 00 	call	0x92	; 0x92 <Receive_data>
 2cc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <CheckSum>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 2d0:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <I_RH>
 2d4:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <D_RH>
 2d8:	25 2f       	mov	r18, r21
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	24 0f       	add	r18, r20
 2de:	31 1d       	adc	r19, r1
 2e0:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <I_Temp>
 2e4:	29 0f       	add	r18, r25
 2e6:	31 1d       	adc	r19, r1
 2e8:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <D_Temp>
 2ec:	29 0f       	add	r18, r25
 2ee:	31 1d       	adc	r19, r1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	41 f0       	breq	.+16     	; 0x308 <main+0x84>
		{
			lcd_config(0x80);
 2f8:	80 e8       	ldi	r24, 0x80	; 128
 2fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
			lcd_print("Error");
 2fe:	8b e7       	ldi	r24, 0x7B	; 123
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
 306:	32 c0       	rjmp	.+100    	; 0x36c <main+0xe8>
		}
		else
		{
			sprintf(humid,"Humid:%d.%d%%",I_RH,D_RH);
 308:	1f 92       	push	r1
 30a:	5f 93       	push	r21
 30c:	1f 92       	push	r1
 30e:	4f 93       	push	r20
 310:	81 e8       	ldi	r24, 0x81	; 129
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	8e 01       	movw	r16, r28
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	1f 93       	push	r17
 320:	0f 93       	push	r16
 322:	0e 94 bd 01 	call	0x37a	; 0x37a <sprintf>
			lcd_config(0x80);
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
			lcd_print(humid);
 32c:	c8 01       	movw	r24, r16
 32e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
			
			sprintf(temp,"Temp:%d.%d DegC",I_Temp,D_Temp);
 332:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <D_Temp>
 336:	1f 92       	push	r1
 338:	8f 93       	push	r24
 33a:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <I_Temp>
 33e:	1f 92       	push	r1
 340:	8f 93       	push	r24
 342:	8f e8       	ldi	r24, 0x8F	; 143
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	9f 93       	push	r25
 348:	8f 93       	push	r24
 34a:	00 5f       	subi	r16, 0xF0	; 240
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
 34e:	1f 93       	push	r17
 350:	0f 93       	push	r16
 352:	0e 94 bd 01 	call	0x37a	; 0x37a <sprintf>
			lcd_config(0xC0);
 356:	80 ec       	ldi	r24, 0xC0	; 192
 358:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_config>
			lcd_print(temp);
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	8f e1       	ldi	r24, 0x1F	; 31
 36e:	9e e4       	ldi	r25, 0x4E	; 78
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <main+0xec>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0xf2>
 376:	00 00       	nop
 378:	93 cf       	rjmp	.-218    	; 0x2a0 <main+0x1c>

0000037a <sprintf>:
 37a:	ae e0       	ldi	r26, 0x0E	; 14
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e3 ec       	ldi	r30, 0xC3	; 195
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__prologue_saves__+0x1c>
 386:	0d 89       	ldd	r16, Y+21	; 0x15
 388:	1e 89       	ldd	r17, Y+22	; 0x16
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	8c 83       	std	Y+4, r24	; 0x04
 38e:	1a 83       	std	Y+2, r17	; 0x02
 390:	09 83       	std	Y+1, r16	; 0x01
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	9f e7       	ldi	r25, 0x7F	; 127
 396:	9e 83       	std	Y+6, r25	; 0x06
 398:	8d 83       	std	Y+5, r24	; 0x05
 39a:	ae 01       	movw	r20, r28
 39c:	47 5e       	subi	r20, 0xE7	; 231
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	6f 89       	ldd	r22, Y+23	; 0x17
 3a2:	78 8d       	ldd	r23, Y+24	; 0x18
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 df 01 	call	0x3be	; 0x3be <vfprintf>
 3ac:	ef 81       	ldd	r30, Y+7	; 0x07
 3ae:	f8 85       	ldd	r31, Y+8	; 0x08
 3b0:	e0 0f       	add	r30, r16
 3b2:	f1 1f       	adc	r31, r17
 3b4:	10 82       	st	Z, r1
 3b6:	2e 96       	adiw	r28, 0x0e	; 14
 3b8:	e4 e0       	ldi	r30, 0x04	; 4
 3ba:	0c 94 9a 04 	jmp	0x934	; 0x934 <__epilogue_restores__+0x1c>

000003be <vfprintf>:
 3be:	ab e0       	ldi	r26, 0x0B	; 11
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e5 ee       	ldi	r30, 0xE5	; 229
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__prologue_saves__>
 3ca:	6c 01       	movw	r12, r24
 3cc:	7b 01       	movw	r14, r22
 3ce:	8a 01       	movw	r16, r20
 3d0:	fc 01       	movw	r30, r24
 3d2:	17 82       	std	Z+7, r1	; 0x07
 3d4:	16 82       	std	Z+6, r1	; 0x06
 3d6:	83 81       	ldd	r24, Z+3	; 0x03
 3d8:	81 ff       	sbrs	r24, 1
 3da:	cc c1       	rjmp	.+920    	; 0x774 <__stack+0x315>
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	3c 01       	movw	r6, r24
 3e2:	f6 01       	movw	r30, r12
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	f7 01       	movw	r30, r14
 3e8:	93 fd       	sbrc	r25, 3
 3ea:	85 91       	lpm	r24, Z+
 3ec:	93 ff       	sbrs	r25, 3
 3ee:	81 91       	ld	r24, Z+
 3f0:	7f 01       	movw	r14, r30
 3f2:	88 23       	and	r24, r24
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <vfprintf+0x3a>
 3f6:	ba c1       	rjmp	.+884    	; 0x76c <__stack+0x30d>
 3f8:	85 32       	cpi	r24, 0x25	; 37
 3fa:	39 f4       	brne	.+14     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 3fc:	93 fd       	sbrc	r25, 3
 3fe:	85 91       	lpm	r24, Z+
 400:	93 ff       	sbrs	r25, 3
 402:	81 91       	ld	r24, Z+
 404:	7f 01       	movw	r14, r30
 406:	85 32       	cpi	r24, 0x25	; 37
 408:	29 f4       	brne	.+10     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 40a:	b6 01       	movw	r22, r12
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 412:	e7 cf       	rjmp	.-50     	; 0x3e2 <vfprintf+0x24>
 414:	91 2c       	mov	r9, r1
 416:	21 2c       	mov	r2, r1
 418:	31 2c       	mov	r3, r1
 41a:	ff e1       	ldi	r31, 0x1F	; 31
 41c:	f3 15       	cp	r31, r3
 41e:	d8 f0       	brcs	.+54     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 420:	8b 32       	cpi	r24, 0x2B	; 43
 422:	79 f0       	breq	.+30     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 424:	38 f4       	brcc	.+14     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 426:	80 32       	cpi	r24, 0x20	; 32
 428:	79 f0       	breq	.+30     	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 42a:	83 32       	cpi	r24, 0x23	; 35
 42c:	a1 f4       	brne	.+40     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 42e:	23 2d       	mov	r18, r3
 430:	20 61       	ori	r18, 0x10	; 16
 432:	1d c0       	rjmp	.+58     	; 0x46e <__stack+0xf>
 434:	8d 32       	cpi	r24, 0x2D	; 45
 436:	61 f0       	breq	.+24     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 438:	80 33       	cpi	r24, 0x30	; 48
 43a:	69 f4       	brne	.+26     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 43c:	23 2d       	mov	r18, r3
 43e:	21 60       	ori	r18, 0x01	; 1
 440:	16 c0       	rjmp	.+44     	; 0x46e <__stack+0xf>
 442:	83 2d       	mov	r24, r3
 444:	82 60       	ori	r24, 0x02	; 2
 446:	38 2e       	mov	r3, r24
 448:	e3 2d       	mov	r30, r3
 44a:	e4 60       	ori	r30, 0x04	; 4
 44c:	3e 2e       	mov	r3, r30
 44e:	2a c0       	rjmp	.+84     	; 0x4a4 <__stack+0x45>
 450:	f3 2d       	mov	r31, r3
 452:	f8 60       	ori	r31, 0x08	; 8
 454:	1d c0       	rjmp	.+58     	; 0x490 <__stack+0x31>
 456:	37 fc       	sbrc	r3, 7
 458:	2d c0       	rjmp	.+90     	; 0x4b4 <__stack+0x55>
 45a:	20 ed       	ldi	r18, 0xD0	; 208
 45c:	28 0f       	add	r18, r24
 45e:	2a 30       	cpi	r18, 0x0A	; 10
 460:	40 f0       	brcs	.+16     	; 0x472 <__stack+0x13>
 462:	8e 32       	cpi	r24, 0x2E	; 46
 464:	b9 f4       	brne	.+46     	; 0x494 <__stack+0x35>
 466:	36 fc       	sbrc	r3, 6
 468:	81 c1       	rjmp	.+770    	; 0x76c <__stack+0x30d>
 46a:	23 2d       	mov	r18, r3
 46c:	20 64       	ori	r18, 0x40	; 64
 46e:	32 2e       	mov	r3, r18
 470:	19 c0       	rjmp	.+50     	; 0x4a4 <__stack+0x45>
 472:	36 fe       	sbrs	r3, 6
 474:	06 c0       	rjmp	.+12     	; 0x482 <__stack+0x23>
 476:	8a e0       	ldi	r24, 0x0A	; 10
 478:	98 9e       	mul	r9, r24
 47a:	20 0d       	add	r18, r0
 47c:	11 24       	eor	r1, r1
 47e:	92 2e       	mov	r9, r18
 480:	11 c0       	rjmp	.+34     	; 0x4a4 <__stack+0x45>
 482:	ea e0       	ldi	r30, 0x0A	; 10
 484:	2e 9e       	mul	r2, r30
 486:	20 0d       	add	r18, r0
 488:	11 24       	eor	r1, r1
 48a:	22 2e       	mov	r2, r18
 48c:	f3 2d       	mov	r31, r3
 48e:	f0 62       	ori	r31, 0x20	; 32
 490:	3f 2e       	mov	r3, r31
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <__stack+0x45>
 494:	8c 36       	cpi	r24, 0x6C	; 108
 496:	21 f4       	brne	.+8      	; 0x4a0 <__stack+0x41>
 498:	83 2d       	mov	r24, r3
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	38 2e       	mov	r3, r24
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__stack+0x45>
 4a0:	88 36       	cpi	r24, 0x68	; 104
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <__stack+0x55>
 4a4:	f7 01       	movw	r30, r14
 4a6:	93 fd       	sbrc	r25, 3
 4a8:	85 91       	lpm	r24, Z+
 4aa:	93 ff       	sbrs	r25, 3
 4ac:	81 91       	ld	r24, Z+
 4ae:	7f 01       	movw	r14, r30
 4b0:	81 11       	cpse	r24, r1
 4b2:	b3 cf       	rjmp	.-154    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 4b4:	98 2f       	mov	r25, r24
 4b6:	9f 7d       	andi	r25, 0xDF	; 223
 4b8:	95 54       	subi	r25, 0x45	; 69
 4ba:	93 30       	cpi	r25, 0x03	; 3
 4bc:	28 f4       	brcc	.+10     	; 0x4c8 <__stack+0x69>
 4be:	0c 5f       	subi	r16, 0xFC	; 252
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	9f e3       	ldi	r25, 0x3F	; 63
 4c4:	99 83       	std	Y+1, r25	; 0x01
 4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <__stack+0x83>
 4c8:	83 36       	cpi	r24, 0x63	; 99
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <__stack+0x79>
 4cc:	83 37       	cpi	r24, 0x73	; 115
 4ce:	71 f0       	breq	.+28     	; 0x4ec <__stack+0x8d>
 4d0:	83 35       	cpi	r24, 0x53	; 83
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__stack+0x77>
 4d4:	59 c0       	rjmp	.+178    	; 0x588 <__stack+0x129>
 4d6:	21 c0       	rjmp	.+66     	; 0x51a <__stack+0xbb>
 4d8:	f8 01       	movw	r30, r16
 4da:	80 81       	ld	r24, Z
 4dc:	89 83       	std	Y+1, r24	; 0x01
 4de:	0e 5f       	subi	r16, 0xFE	; 254
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	88 24       	eor	r8, r8
 4e4:	83 94       	inc	r8
 4e6:	91 2c       	mov	r9, r1
 4e8:	53 01       	movw	r10, r6
 4ea:	13 c0       	rjmp	.+38     	; 0x512 <__stack+0xb3>
 4ec:	28 01       	movw	r4, r16
 4ee:	f2 e0       	ldi	r31, 0x02	; 2
 4f0:	4f 0e       	add	r4, r31
 4f2:	51 1c       	adc	r5, r1
 4f4:	f8 01       	movw	r30, r16
 4f6:	a0 80       	ld	r10, Z
 4f8:	b1 80       	ldd	r11, Z+1	; 0x01
 4fa:	36 fe       	sbrs	r3, 6
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <__stack+0xa5>
 4fe:	69 2d       	mov	r22, r9
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0xa9>
 504:	6f ef       	ldi	r22, 0xFF	; 255
 506:	7f ef       	ldi	r23, 0xFF	; 255
 508:	c5 01       	movw	r24, r10
 50a:	0e 94 cb 03 	call	0x796	; 0x796 <strnlen>
 50e:	4c 01       	movw	r8, r24
 510:	82 01       	movw	r16, r4
 512:	f3 2d       	mov	r31, r3
 514:	ff 77       	andi	r31, 0x7F	; 127
 516:	3f 2e       	mov	r3, r31
 518:	16 c0       	rjmp	.+44     	; 0x546 <__stack+0xe7>
 51a:	28 01       	movw	r4, r16
 51c:	22 e0       	ldi	r18, 0x02	; 2
 51e:	42 0e       	add	r4, r18
 520:	51 1c       	adc	r5, r1
 522:	f8 01       	movw	r30, r16
 524:	a0 80       	ld	r10, Z
 526:	b1 80       	ldd	r11, Z+1	; 0x01
 528:	36 fe       	sbrs	r3, 6
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__stack+0xd3>
 52c:	69 2d       	mov	r22, r9
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <__stack+0xd7>
 532:	6f ef       	ldi	r22, 0xFF	; 255
 534:	7f ef       	ldi	r23, 0xFF	; 255
 536:	c5 01       	movw	r24, r10
 538:	0e 94 c0 03 	call	0x780	; 0x780 <strnlen_P>
 53c:	4c 01       	movw	r8, r24
 53e:	f3 2d       	mov	r31, r3
 540:	f0 68       	ori	r31, 0x80	; 128
 542:	3f 2e       	mov	r3, r31
 544:	82 01       	movw	r16, r4
 546:	33 fc       	sbrc	r3, 3
 548:	1b c0       	rjmp	.+54     	; 0x580 <__stack+0x121>
 54a:	82 2d       	mov	r24, r2
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	88 16       	cp	r8, r24
 550:	99 06       	cpc	r9, r25
 552:	b0 f4       	brcc	.+44     	; 0x580 <__stack+0x121>
 554:	b6 01       	movw	r22, r12
 556:	80 e2       	ldi	r24, 0x20	; 32
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 55e:	2a 94       	dec	r2
 560:	f4 cf       	rjmp	.-24     	; 0x54a <__stack+0xeb>
 562:	f5 01       	movw	r30, r10
 564:	37 fc       	sbrc	r3, 7
 566:	85 91       	lpm	r24, Z+
 568:	37 fe       	sbrs	r3, 7
 56a:	81 91       	ld	r24, Z+
 56c:	5f 01       	movw	r10, r30
 56e:	b6 01       	movw	r22, r12
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 576:	21 10       	cpse	r2, r1
 578:	2a 94       	dec	r2
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	82 1a       	sub	r8, r18
 57e:	91 08       	sbc	r9, r1
 580:	81 14       	cp	r8, r1
 582:	91 04       	cpc	r9, r1
 584:	71 f7       	brne	.-36     	; 0x562 <__stack+0x103>
 586:	e8 c0       	rjmp	.+464    	; 0x758 <__stack+0x2f9>
 588:	84 36       	cpi	r24, 0x64	; 100
 58a:	11 f0       	breq	.+4      	; 0x590 <__stack+0x131>
 58c:	89 36       	cpi	r24, 0x69	; 105
 58e:	41 f5       	brne	.+80     	; 0x5e0 <__stack+0x181>
 590:	f8 01       	movw	r30, r16
 592:	37 fe       	sbrs	r3, 7
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <__stack+0x145>
 596:	60 81       	ld	r22, Z
 598:	71 81       	ldd	r23, Z+1	; 0x01
 59a:	82 81       	ldd	r24, Z+2	; 0x02
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	0c 5f       	subi	r16, 0xFC	; 252
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <__stack+0x155>
 5a4:	60 81       	ld	r22, Z
 5a6:	71 81       	ldd	r23, Z+1	; 0x01
 5a8:	07 2e       	mov	r0, r23
 5aa:	00 0c       	add	r0, r0
 5ac:	88 0b       	sbc	r24, r24
 5ae:	99 0b       	sbc	r25, r25
 5b0:	0e 5f       	subi	r16, 0xFE	; 254
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	f3 2d       	mov	r31, r3
 5b6:	ff 76       	andi	r31, 0x6F	; 111
 5b8:	3f 2e       	mov	r3, r31
 5ba:	97 ff       	sbrs	r25, 7
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__stack+0x171>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	f0 68       	ori	r31, 0x80	; 128
 5ce:	3f 2e       	mov	r3, r31
 5d0:	2a e0       	ldi	r18, 0x0A	; 10
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	a3 01       	movw	r20, r6
 5d6:	0e 94 12 04 	call	0x824	; 0x824 <__ultoa_invert>
 5da:	88 2e       	mov	r8, r24
 5dc:	86 18       	sub	r8, r6
 5de:	45 c0       	rjmp	.+138    	; 0x66a <__stack+0x20b>
 5e0:	85 37       	cpi	r24, 0x75	; 117
 5e2:	31 f4       	brne	.+12     	; 0x5f0 <__stack+0x191>
 5e4:	23 2d       	mov	r18, r3
 5e6:	2f 7e       	andi	r18, 0xEF	; 239
 5e8:	b2 2e       	mov	r11, r18
 5ea:	2a e0       	ldi	r18, 0x0A	; 10
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	25 c0       	rjmp	.+74     	; 0x63a <__stack+0x1db>
 5f0:	93 2d       	mov	r25, r3
 5f2:	99 7f       	andi	r25, 0xF9	; 249
 5f4:	b9 2e       	mov	r11, r25
 5f6:	8f 36       	cpi	r24, 0x6F	; 111
 5f8:	c1 f0       	breq	.+48     	; 0x62a <__stack+0x1cb>
 5fa:	18 f4       	brcc	.+6      	; 0x602 <__stack+0x1a3>
 5fc:	88 35       	cpi	r24, 0x58	; 88
 5fe:	79 f0       	breq	.+30     	; 0x61e <__stack+0x1bf>
 600:	b5 c0       	rjmp	.+362    	; 0x76c <__stack+0x30d>
 602:	80 37       	cpi	r24, 0x70	; 112
 604:	19 f0       	breq	.+6      	; 0x60c <__stack+0x1ad>
 606:	88 37       	cpi	r24, 0x78	; 120
 608:	21 f0       	breq	.+8      	; 0x612 <__stack+0x1b3>
 60a:	b0 c0       	rjmp	.+352    	; 0x76c <__stack+0x30d>
 60c:	e9 2f       	mov	r30, r25
 60e:	e0 61       	ori	r30, 0x10	; 16
 610:	be 2e       	mov	r11, r30
 612:	b4 fe       	sbrs	r11, 4
 614:	0d c0       	rjmp	.+26     	; 0x630 <__stack+0x1d1>
 616:	fb 2d       	mov	r31, r11
 618:	f4 60       	ori	r31, 0x04	; 4
 61a:	bf 2e       	mov	r11, r31
 61c:	09 c0       	rjmp	.+18     	; 0x630 <__stack+0x1d1>
 61e:	34 fe       	sbrs	r3, 4
 620:	0a c0       	rjmp	.+20     	; 0x636 <__stack+0x1d7>
 622:	29 2f       	mov	r18, r25
 624:	26 60       	ori	r18, 0x06	; 6
 626:	b2 2e       	mov	r11, r18
 628:	06 c0       	rjmp	.+12     	; 0x636 <__stack+0x1d7>
 62a:	28 e0       	ldi	r18, 0x08	; 8
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	05 c0       	rjmp	.+10     	; 0x63a <__stack+0x1db>
 630:	20 e1       	ldi	r18, 0x10	; 16
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	02 c0       	rjmp	.+4      	; 0x63a <__stack+0x1db>
 636:	20 e1       	ldi	r18, 0x10	; 16
 638:	32 e0       	ldi	r19, 0x02	; 2
 63a:	f8 01       	movw	r30, r16
 63c:	b7 fe       	sbrs	r11, 7
 63e:	07 c0       	rjmp	.+14     	; 0x64e <__stack+0x1ef>
 640:	60 81       	ld	r22, Z
 642:	71 81       	ldd	r23, Z+1	; 0x01
 644:	82 81       	ldd	r24, Z+2	; 0x02
 646:	93 81       	ldd	r25, Z+3	; 0x03
 648:	0c 5f       	subi	r16, 0xFC	; 252
 64a:	1f 4f       	sbci	r17, 0xFF	; 255
 64c:	06 c0       	rjmp	.+12     	; 0x65a <__stack+0x1fb>
 64e:	60 81       	ld	r22, Z
 650:	71 81       	ldd	r23, Z+1	; 0x01
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 5f       	subi	r16, 0xFE	; 254
 658:	1f 4f       	sbci	r17, 0xFF	; 255
 65a:	a3 01       	movw	r20, r6
 65c:	0e 94 12 04 	call	0x824	; 0x824 <__ultoa_invert>
 660:	88 2e       	mov	r8, r24
 662:	86 18       	sub	r8, r6
 664:	fb 2d       	mov	r31, r11
 666:	ff 77       	andi	r31, 0x7F	; 127
 668:	3f 2e       	mov	r3, r31
 66a:	36 fe       	sbrs	r3, 6
 66c:	0d c0       	rjmp	.+26     	; 0x688 <__stack+0x229>
 66e:	23 2d       	mov	r18, r3
 670:	2e 7f       	andi	r18, 0xFE	; 254
 672:	a2 2e       	mov	r10, r18
 674:	89 14       	cp	r8, r9
 676:	58 f4       	brcc	.+22     	; 0x68e <__stack+0x22f>
 678:	34 fe       	sbrs	r3, 4
 67a:	0b c0       	rjmp	.+22     	; 0x692 <__stack+0x233>
 67c:	32 fc       	sbrc	r3, 2
 67e:	09 c0       	rjmp	.+18     	; 0x692 <__stack+0x233>
 680:	83 2d       	mov	r24, r3
 682:	8e 7e       	andi	r24, 0xEE	; 238
 684:	a8 2e       	mov	r10, r24
 686:	05 c0       	rjmp	.+10     	; 0x692 <__stack+0x233>
 688:	b8 2c       	mov	r11, r8
 68a:	a3 2c       	mov	r10, r3
 68c:	03 c0       	rjmp	.+6      	; 0x694 <__stack+0x235>
 68e:	b8 2c       	mov	r11, r8
 690:	01 c0       	rjmp	.+2      	; 0x694 <__stack+0x235>
 692:	b9 2c       	mov	r11, r9
 694:	a4 fe       	sbrs	r10, 4
 696:	0f c0       	rjmp	.+30     	; 0x6b6 <__stack+0x257>
 698:	fe 01       	movw	r30, r28
 69a:	e8 0d       	add	r30, r8
 69c:	f1 1d       	adc	r31, r1
 69e:	80 81       	ld	r24, Z
 6a0:	80 33       	cpi	r24, 0x30	; 48
 6a2:	21 f4       	brne	.+8      	; 0x6ac <__stack+0x24d>
 6a4:	9a 2d       	mov	r25, r10
 6a6:	99 7e       	andi	r25, 0xE9	; 233
 6a8:	a9 2e       	mov	r10, r25
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <__stack+0x25f>
 6ac:	a2 fe       	sbrs	r10, 2
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <__stack+0x25d>
 6b0:	b3 94       	inc	r11
 6b2:	b3 94       	inc	r11
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <__stack+0x25f>
 6b6:	8a 2d       	mov	r24, r10
 6b8:	86 78       	andi	r24, 0x86	; 134
 6ba:	09 f0       	breq	.+2      	; 0x6be <__stack+0x25f>
 6bc:	b3 94       	inc	r11
 6be:	a3 fc       	sbrc	r10, 3
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <__stack+0x285>
 6c2:	a0 fe       	sbrs	r10, 0
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__stack+0x273>
 6c6:	b2 14       	cp	r11, r2
 6c8:	88 f4       	brcc	.+34     	; 0x6ec <__stack+0x28d>
 6ca:	28 0c       	add	r2, r8
 6cc:	92 2c       	mov	r9, r2
 6ce:	9b 18       	sub	r9, r11
 6d0:	0e c0       	rjmp	.+28     	; 0x6ee <__stack+0x28f>
 6d2:	b2 14       	cp	r11, r2
 6d4:	60 f4       	brcc	.+24     	; 0x6ee <__stack+0x28f>
 6d6:	b6 01       	movw	r22, r12
 6d8:	80 e2       	ldi	r24, 0x20	; 32
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 6e0:	b3 94       	inc	r11
 6e2:	f7 cf       	rjmp	.-18     	; 0x6d2 <__stack+0x273>
 6e4:	b2 14       	cp	r11, r2
 6e6:	18 f4       	brcc	.+6      	; 0x6ee <__stack+0x28f>
 6e8:	2b 18       	sub	r2, r11
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__stack+0x291>
 6ec:	98 2c       	mov	r9, r8
 6ee:	21 2c       	mov	r2, r1
 6f0:	a4 fe       	sbrs	r10, 4
 6f2:	10 c0       	rjmp	.+32     	; 0x714 <__stack+0x2b5>
 6f4:	b6 01       	movw	r22, r12
 6f6:	80 e3       	ldi	r24, 0x30	; 48
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 6fe:	a2 fe       	sbrs	r10, 2
 700:	17 c0       	rjmp	.+46     	; 0x730 <__stack+0x2d1>
 702:	a1 fc       	sbrc	r10, 1
 704:	03 c0       	rjmp	.+6      	; 0x70c <__stack+0x2ad>
 706:	88 e7       	ldi	r24, 0x78	; 120
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <__stack+0x2b1>
 70c:	88 e5       	ldi	r24, 0x58	; 88
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	b6 01       	movw	r22, r12
 712:	0c c0       	rjmp	.+24     	; 0x72c <__stack+0x2cd>
 714:	8a 2d       	mov	r24, r10
 716:	86 78       	andi	r24, 0x86	; 134
 718:	59 f0       	breq	.+22     	; 0x730 <__stack+0x2d1>
 71a:	a1 fe       	sbrs	r10, 1
 71c:	02 c0       	rjmp	.+4      	; 0x722 <__stack+0x2c3>
 71e:	8b e2       	ldi	r24, 0x2B	; 43
 720:	01 c0       	rjmp	.+2      	; 0x724 <__stack+0x2c5>
 722:	80 e2       	ldi	r24, 0x20	; 32
 724:	a7 fc       	sbrc	r10, 7
 726:	8d e2       	ldi	r24, 0x2D	; 45
 728:	b6 01       	movw	r22, r12
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 730:	89 14       	cp	r8, r9
 732:	38 f4       	brcc	.+14     	; 0x742 <__stack+0x2e3>
 734:	b6 01       	movw	r22, r12
 736:	80 e3       	ldi	r24, 0x30	; 48
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 73e:	9a 94       	dec	r9
 740:	f7 cf       	rjmp	.-18     	; 0x730 <__stack+0x2d1>
 742:	8a 94       	dec	r8
 744:	f3 01       	movw	r30, r6
 746:	e8 0d       	add	r30, r8
 748:	f1 1d       	adc	r31, r1
 74a:	80 81       	ld	r24, Z
 74c:	b6 01       	movw	r22, r12
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 754:	81 10       	cpse	r8, r1
 756:	f5 cf       	rjmp	.-22     	; 0x742 <__stack+0x2e3>
 758:	22 20       	and	r2, r2
 75a:	09 f4       	brne	.+2      	; 0x75e <__stack+0x2ff>
 75c:	42 ce       	rjmp	.-892    	; 0x3e2 <vfprintf+0x24>
 75e:	b6 01       	movw	r22, r12
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 d6 03 	call	0x7ac	; 0x7ac <fputc>
 768:	2a 94       	dec	r2
 76a:	f6 cf       	rjmp	.-20     	; 0x758 <__stack+0x2f9>
 76c:	f6 01       	movw	r30, r12
 76e:	86 81       	ldd	r24, Z+6	; 0x06
 770:	97 81       	ldd	r25, Z+7	; 0x07
 772:	02 c0       	rjmp	.+4      	; 0x778 <__stack+0x319>
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	2b 96       	adiw	r28, 0x0b	; 11
 77a:	e2 e1       	ldi	r30, 0x12	; 18
 77c:	0c 94 8c 04 	jmp	0x918	; 0x918 <__epilogue_restores__>

00000780 <strnlen_P>:
 780:	fc 01       	movw	r30, r24
 782:	05 90       	lpm	r0, Z+
 784:	61 50       	subi	r22, 0x01	; 1
 786:	70 40       	sbci	r23, 0x00	; 0
 788:	01 10       	cpse	r0, r1
 78a:	d8 f7       	brcc	.-10     	; 0x782 <strnlen_P+0x2>
 78c:	80 95       	com	r24
 78e:	90 95       	com	r25
 790:	8e 0f       	add	r24, r30
 792:	9f 1f       	adc	r25, r31
 794:	08 95       	ret

00000796 <strnlen>:
 796:	fc 01       	movw	r30, r24
 798:	61 50       	subi	r22, 0x01	; 1
 79a:	70 40       	sbci	r23, 0x00	; 0
 79c:	01 90       	ld	r0, Z+
 79e:	01 10       	cpse	r0, r1
 7a0:	d8 f7       	brcc	.-10     	; 0x798 <strnlen+0x2>
 7a2:	80 95       	com	r24
 7a4:	90 95       	com	r25
 7a6:	8e 0f       	add	r24, r30
 7a8:	9f 1f       	adc	r25, r31
 7aa:	08 95       	ret

000007ac <fputc>:
 7ac:	0f 93       	push	r16
 7ae:	1f 93       	push	r17
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	fb 01       	movw	r30, r22
 7b6:	23 81       	ldd	r18, Z+3	; 0x03
 7b8:	21 fd       	sbrc	r18, 1
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <fputc+0x16>
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	9f ef       	ldi	r25, 0xFF	; 255
 7c0:	2c c0       	rjmp	.+88     	; 0x81a <fputc+0x6e>
 7c2:	22 ff       	sbrs	r18, 2
 7c4:	16 c0       	rjmp	.+44     	; 0x7f2 <fputc+0x46>
 7c6:	46 81       	ldd	r20, Z+6	; 0x06
 7c8:	57 81       	ldd	r21, Z+7	; 0x07
 7ca:	24 81       	ldd	r18, Z+4	; 0x04
 7cc:	35 81       	ldd	r19, Z+5	; 0x05
 7ce:	42 17       	cp	r20, r18
 7d0:	53 07       	cpc	r21, r19
 7d2:	44 f4       	brge	.+16     	; 0x7e4 <fputc+0x38>
 7d4:	a0 81       	ld	r26, Z
 7d6:	b1 81       	ldd	r27, Z+1	; 0x01
 7d8:	9d 01       	movw	r18, r26
 7da:	2f 5f       	subi	r18, 0xFF	; 255
 7dc:	3f 4f       	sbci	r19, 0xFF	; 255
 7de:	31 83       	std	Z+1, r19	; 0x01
 7e0:	20 83       	st	Z, r18
 7e2:	8c 93       	st	X, r24
 7e4:	26 81       	ldd	r18, Z+6	; 0x06
 7e6:	37 81       	ldd	r19, Z+7	; 0x07
 7e8:	2f 5f       	subi	r18, 0xFF	; 255
 7ea:	3f 4f       	sbci	r19, 0xFF	; 255
 7ec:	37 83       	std	Z+7, r19	; 0x07
 7ee:	26 83       	std	Z+6, r18	; 0x06
 7f0:	14 c0       	rjmp	.+40     	; 0x81a <fputc+0x6e>
 7f2:	8b 01       	movw	r16, r22
 7f4:	ec 01       	movw	r28, r24
 7f6:	fb 01       	movw	r30, r22
 7f8:	00 84       	ldd	r0, Z+8	; 0x08
 7fa:	f1 85       	ldd	r31, Z+9	; 0x09
 7fc:	e0 2d       	mov	r30, r0
 7fe:	09 95       	icall
 800:	89 2b       	or	r24, r25
 802:	e1 f6       	brne	.-72     	; 0x7bc <fputc+0x10>
 804:	d8 01       	movw	r26, r16
 806:	16 96       	adiw	r26, 0x06	; 6
 808:	8d 91       	ld	r24, X+
 80a:	9c 91       	ld	r25, X
 80c:	17 97       	sbiw	r26, 0x07	; 7
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	17 96       	adiw	r26, 0x07	; 7
 812:	9c 93       	st	X, r25
 814:	8e 93       	st	-X, r24
 816:	16 97       	sbiw	r26, 0x06	; 6
 818:	ce 01       	movw	r24, r28
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	08 95       	ret

00000824 <__ultoa_invert>:
 824:	fa 01       	movw	r30, r20
 826:	aa 27       	eor	r26, r26
 828:	28 30       	cpi	r18, 0x08	; 8
 82a:	51 f1       	breq	.+84     	; 0x880 <__ultoa_invert+0x5c>
 82c:	20 31       	cpi	r18, 0x10	; 16
 82e:	81 f1       	breq	.+96     	; 0x890 <__ultoa_invert+0x6c>
 830:	e8 94       	clt
 832:	6f 93       	push	r22
 834:	6e 7f       	andi	r22, 0xFE	; 254
 836:	6e 5f       	subi	r22, 0xFE	; 254
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	af 4f       	sbci	r26, 0xFF	; 255
 840:	b1 e0       	ldi	r27, 0x01	; 1
 842:	3e d0       	rcall	.+124    	; 0x8c0 <__ultoa_invert+0x9c>
 844:	b4 e0       	ldi	r27, 0x04	; 4
 846:	3c d0       	rcall	.+120    	; 0x8c0 <__ultoa_invert+0x9c>
 848:	67 0f       	add	r22, r23
 84a:	78 1f       	adc	r23, r24
 84c:	89 1f       	adc	r24, r25
 84e:	9a 1f       	adc	r25, r26
 850:	a1 1d       	adc	r26, r1
 852:	68 0f       	add	r22, r24
 854:	79 1f       	adc	r23, r25
 856:	8a 1f       	adc	r24, r26
 858:	91 1d       	adc	r25, r1
 85a:	a1 1d       	adc	r26, r1
 85c:	6a 0f       	add	r22, r26
 85e:	71 1d       	adc	r23, r1
 860:	81 1d       	adc	r24, r1
 862:	91 1d       	adc	r25, r1
 864:	a1 1d       	adc	r26, r1
 866:	20 d0       	rcall	.+64     	; 0x8a8 <__ultoa_invert+0x84>
 868:	09 f4       	brne	.+2      	; 0x86c <__ultoa_invert+0x48>
 86a:	68 94       	set
 86c:	3f 91       	pop	r19
 86e:	2a e0       	ldi	r18, 0x0A	; 10
 870:	26 9f       	mul	r18, r22
 872:	11 24       	eor	r1, r1
 874:	30 19       	sub	r19, r0
 876:	30 5d       	subi	r19, 0xD0	; 208
 878:	31 93       	st	Z+, r19
 87a:	de f6       	brtc	.-74     	; 0x832 <__ultoa_invert+0xe>
 87c:	cf 01       	movw	r24, r30
 87e:	08 95       	ret
 880:	46 2f       	mov	r20, r22
 882:	47 70       	andi	r20, 0x07	; 7
 884:	40 5d       	subi	r20, 0xD0	; 208
 886:	41 93       	st	Z+, r20
 888:	b3 e0       	ldi	r27, 0x03	; 3
 88a:	0f d0       	rcall	.+30     	; 0x8aa <__ultoa_invert+0x86>
 88c:	c9 f7       	brne	.-14     	; 0x880 <__ultoa_invert+0x5c>
 88e:	f6 cf       	rjmp	.-20     	; 0x87c <__ultoa_invert+0x58>
 890:	46 2f       	mov	r20, r22
 892:	4f 70       	andi	r20, 0x0F	; 15
 894:	40 5d       	subi	r20, 0xD0	; 208
 896:	4a 33       	cpi	r20, 0x3A	; 58
 898:	18 f0       	brcs	.+6      	; 0x8a0 <__ultoa_invert+0x7c>
 89a:	49 5d       	subi	r20, 0xD9	; 217
 89c:	31 fd       	sbrc	r19, 1
 89e:	40 52       	subi	r20, 0x20	; 32
 8a0:	41 93       	st	Z+, r20
 8a2:	02 d0       	rcall	.+4      	; 0x8a8 <__ultoa_invert+0x84>
 8a4:	a9 f7       	brne	.-22     	; 0x890 <__ultoa_invert+0x6c>
 8a6:	ea cf       	rjmp	.-44     	; 0x87c <__ultoa_invert+0x58>
 8a8:	b4 e0       	ldi	r27, 0x04	; 4
 8aa:	a6 95       	lsr	r26
 8ac:	97 95       	ror	r25
 8ae:	87 95       	ror	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	ba 95       	dec	r27
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <__ultoa_invert+0x86>
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	61 05       	cpc	r22, r1
 8bc:	71 05       	cpc	r23, r1
 8be:	08 95       	ret
 8c0:	9b 01       	movw	r18, r22
 8c2:	ac 01       	movw	r20, r24
 8c4:	0a 2e       	mov	r0, r26
 8c6:	06 94       	lsr	r0
 8c8:	57 95       	ror	r21
 8ca:	47 95       	ror	r20
 8cc:	37 95       	ror	r19
 8ce:	27 95       	ror	r18
 8d0:	ba 95       	dec	r27
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__ultoa_invert+0xa2>
 8d4:	62 0f       	add	r22, r18
 8d6:	73 1f       	adc	r23, r19
 8d8:	84 1f       	adc	r24, r20
 8da:	95 1f       	adc	r25, r21
 8dc:	a0 1d       	adc	r26, r0
 8de:	08 95       	ret

000008e0 <__prologue_saves__>:
 8e0:	2f 92       	push	r2
 8e2:	3f 92       	push	r3
 8e4:	4f 92       	push	r4
 8e6:	5f 92       	push	r5
 8e8:	6f 92       	push	r6
 8ea:	7f 92       	push	r7
 8ec:	8f 92       	push	r8
 8ee:	9f 92       	push	r9
 8f0:	af 92       	push	r10
 8f2:	bf 92       	push	r11
 8f4:	cf 92       	push	r12
 8f6:	df 92       	push	r13
 8f8:	ef 92       	push	r14
 8fa:	ff 92       	push	r15
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 908:	ca 1b       	sub	r28, r26
 90a:	db 0b       	sbc	r29, r27
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	09 94       	ijmp

00000918 <__epilogue_restores__>:
 918:	2a 88       	ldd	r2, Y+18	; 0x12
 91a:	39 88       	ldd	r3, Y+17	; 0x11
 91c:	48 88       	ldd	r4, Y+16	; 0x10
 91e:	5f 84       	ldd	r5, Y+15	; 0x0f
 920:	6e 84       	ldd	r6, Y+14	; 0x0e
 922:	7d 84       	ldd	r7, Y+13	; 0x0d
 924:	8c 84       	ldd	r8, Y+12	; 0x0c
 926:	9b 84       	ldd	r9, Y+11	; 0x0b
 928:	aa 84       	ldd	r10, Y+10	; 0x0a
 92a:	b9 84       	ldd	r11, Y+9	; 0x09
 92c:	c8 84       	ldd	r12, Y+8	; 0x08
 92e:	df 80       	ldd	r13, Y+7	; 0x07
 930:	ee 80       	ldd	r14, Y+6	; 0x06
 932:	fd 80       	ldd	r15, Y+5	; 0x05
 934:	0c 81       	ldd	r16, Y+4	; 0x04
 936:	1b 81       	ldd	r17, Y+3	; 0x03
 938:	aa 81       	ldd	r26, Y+2	; 0x02
 93a:	b9 81       	ldd	r27, Y+1	; 0x01
 93c:	ce 0f       	add	r28, r30
 93e:	d1 1d       	adc	r29, r1
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	ed 01       	movw	r28, r26
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>

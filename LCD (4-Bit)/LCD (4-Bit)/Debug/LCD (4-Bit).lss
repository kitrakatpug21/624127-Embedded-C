
LCD (4-Bit).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000274  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b70  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000434  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000489  00000000  00000000  00001d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  7a:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_config>:

void lcd_config(uint8_t cmd)
{
	// FIRST PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | (cmd & 0xF0);// msb will load first
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	95 bb       	out	0x15, r25	; 21
	//2. Set RS Pin to 0
	PORTC = PORTC & ~(0b00000001);	// Set RS Pin to 0
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	95 bb       	out	0x15, r25	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
  94:	95 b3       	in	r25, 0x15	; 21
  96:	92 60       	ori	r25, 0x02	; 2
  98:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e1       	ldi	r30, 0x1F	; 31
  9c:	fe e4       	ldi	r31, 0x4E	; 78
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_config+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_config+0x22>
  a4:	00 00       	nop
	_delay_ms(10);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	9d 7f       	andi	r25, 0xFD	; 253
  aa:	95 bb       	out	0x15, r25	; 21
  ac:	ef e1       	ldi	r30, 0x1F	; 31
  ae:	fe e4       	ldi	r31, 0x4E	; 78
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_config+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_config+0x34>
  b6:	00 00       	nop
	_delay_ms(10);
	// SECOND PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | ((cmd<<4) & 0xF0);// lsb will load first
  b8:	25 b3       	in	r18, 0x15	; 21
  ba:	f0 e1       	ldi	r31, 0x10	; 16
  bc:	8f 9f       	mul	r24, r31
  be:	c0 01       	movw	r24, r0
  c0:	11 24       	eor	r1, r1
  c2:	92 2f       	mov	r25, r18
  c4:	9f 70       	andi	r25, 0x0F	; 15
  c6:	89 2b       	or	r24, r25
  c8:	85 bb       	out	0x15, r24	; 21
	//2. Set RS Pin to 0
	PORTC = PORTC & ~(0b00000001);	// Set RS Pin to 0
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	85 bb       	out	0x15, r24	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	9e e4       	ldi	r25, 0x4E	; 78
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_config+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_config+0x5e>
  e0:	00 00       	nop
	_delay_ms(10);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	ef e1       	ldi	r30, 0x1F	; 31
  ea:	fe e4       	ldi	r31, 0x4E	; 78
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_config+0x6a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_config+0x70>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <lcd_character>:
}
void lcd_character(char ch)
{
	// FIRST PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | (ch & 0xF0);// msb will load first
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	28 2f       	mov	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	92 2b       	or	r25, r18
 100:	95 bb       	out	0x15, r25	; 21
	//2. Set RS Pin to 1
	PORTC = PORTC | 0b00000001;	// Set RS Pin to 1
 102:	95 b3       	in	r25, 0x15	; 21
 104:	91 60       	ori	r25, 0x01	; 1
 106:	95 bb       	out	0x15, r25	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
 108:	95 b3       	in	r25, 0x15	; 21
 10a:	92 60       	ori	r25, 0x02	; 2
 10c:	95 bb       	out	0x15, r25	; 21
 10e:	ef e1       	ldi	r30, 0x1F	; 31
 110:	fe e4       	ldi	r31, 0x4E	; 78
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_character+0x1c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_character+0x22>
 118:	00 00       	nop
	_delay_ms(10);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
 11a:	95 b3       	in	r25, 0x15	; 21
 11c:	9d 7f       	andi	r25, 0xFD	; 253
 11e:	95 bb       	out	0x15, r25	; 21
 120:	ef e1       	ldi	r30, 0x1F	; 31
 122:	fe e4       	ldi	r31, 0x4E	; 78
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_character+0x2e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_character+0x34>
 12a:	00 00       	nop
	_delay_ms(10);
	// SECOND PART OF 8-bit Data
	//1. Upload the character on PORTC
	PORTC = (PORTC & 0x0F) | ((ch<<4) & 0xF0);// lsb will load first
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	f0 e1       	ldi	r31, 0x10	; 16
 130:	8f 9f       	mul	r24, r31
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	92 2f       	mov	r25, r18
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	85 bb       	out	0x15, r24	; 21
	//2. Set RS Pin to 1
	PORTC = PORTC | 0b00000001;	// Set RS Pin to 1
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 bb       	out	0x15, r24	; 21
	//3. Generate a Latch signal 0-1-0
	PORTC = PORTC | 0b00000010;	// Set EN Pin to 1
 144:	85 b3       	in	r24, 0x15	; 21
 146:	82 60       	ori	r24, 0x02	; 2
 148:	85 bb       	out	0x15, r24	; 21
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_character+0x58>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_character+0x5e>
 154:	00 00       	nop
	_delay_ms(10);
	PORTC = PORTC & ~(0b00000010);	// Set EN Pin to 0
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	ef e1       	ldi	r30, 0x1F	; 31
 15e:	fe e4       	ldi	r31, 0x4E	; 78
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_character+0x6a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_character+0x70>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <lcd_setup>:
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	82 e5       	ldi	r24, 0x52	; 82
 16e:	97 e0       	ldi	r25, 0x07	; 7
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <lcd_setup+0x6>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_setup+0x10>
 17a:	00 00       	nop
void lcd_setup()
{
	//1. Wait for 300ms to let LCD turn ON
	_delay_ms(300);
	//2. Set the LCD mode to 4-bit 16 character and 2 rows
	lcd_config(0x33);
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	lcd_config(0x32);
 182:	82 e3       	ldi	r24, 0x32	; 50
 184:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	lcd_config(0x28);
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	//16x1 -> 0x30
	//3. Set the Writing Style (Left -> Right)
	lcd_config(0x06);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	// Right-> Left  0x04
	//4. Set the Cursor Style (a. Solid, b. Blinking, c. OFF)
	lcd_config(0x0E);
 194:	8e e0       	ldi	r24, 0x0E	; 14
 196:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	// 0x0E -> Solid
	// 0x0F -> Blinking
	// 0x0C -> OFF
	//5. Clear the garbage values on LCD Screen
	lcd_config(0x01);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	//6. Set the Home Location
	lcd_config(0x80);
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
 1a6:	08 95       	ret

000001a8 <lcd_print>:
}

void lcd_print(char *data)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	while (*data != '\0')
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <lcd_print+0xe>
	{
		lcd_character(*data);
 1b0:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_character>
		data++;
 1b4:	21 96       	adiw	r28, 0x01	; 1
	lcd_config(0x80);
}

void lcd_print(char *data)
{
	while (*data != '\0')
 1b6:	88 81       	ld	r24, Y
 1b8:	81 11       	cpse	r24, r1
 1ba:	fa cf       	rjmp	.-12     	; 0x1b0 <lcd_print+0x8>
	{
		lcd_character(*data);
		data++;
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <main>:

int main(void)
{
	DDRC = 0b11001111;// D7..D0
 1c2:	8f ec       	ldi	r24, 0xCF	; 207
 1c4:	84 bb       	out	0x14, r24	; 20
	lcd_setup();
 1c6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_setup>
	while (1)
	{
		lcd_config(0x80);
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
		lcd_print("SAVITRI");
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_print>
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	89 e6       	ldi	r24, 0x69	; 105
 1dc:	98 e1       	ldi	r25, 0x18	; 24
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x1c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x26>
 1e8:	00 00       	nop
		_delay_ms(1000);
		lcd_config(0xC0);
 1ea:	80 ec       	ldi	r24, 0xC0	; 192
 1ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
		lcd_print("RAJIV");
 1f0:	88 e6       	ldi	r24, 0x68	; 104
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_print>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	89 e6       	ldi	r24, 0x69	; 105
 1fc:	98 e1       	ldi	r25, 0x18	; 24
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x3c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 208:	00 00       	nop
		_delay_ms(1000);
		lcd_config(0x01);_delay_ms(10);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
 210:	8f e1       	ldi	r24, 0x1F	; 31
 212:	9e e4       	ldi	r25, 0x4E	; 78
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 21a:	00 00       	nop
		lcd_config(0x80);
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
		lcd_print("SUMANTI");
 222:	8e e6       	ldi	r24, 0x6E	; 110
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_print>
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	29 e6       	ldi	r18, 0x69	; 105
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	91 50       	subi	r25, 0x01	; 1
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 238:	00 c0       	rjmp	.+0      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23a:	00 00       	nop
		_delay_ms(1000);
		lcd_config(0xC0);
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
		lcd_print("PRITAM");
 242:	86 e7       	ldi	r24, 0x76	; 118
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_print>
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	29 e6       	ldi	r18, 0x69	; 105
 24e:	88 e1       	ldi	r24, 0x18	; 24
 250:	91 50       	subi	r25, 0x01	; 1
 252:	20 40       	sbci	r18, 0x00	; 0
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 25a:	00 00       	nop
		_delay_ms(1000);
		lcd_config(0x01);_delay_ms(10);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
 262:	8f e1       	ldi	r24, 0x1F	; 31
 264:	9e e4       	ldi	r25, 0x4E	; 78
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 26c:	00 00       	nop
 26e:	ad cf       	rjmp	.-166    	; 0x1ca <main+0x8>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>

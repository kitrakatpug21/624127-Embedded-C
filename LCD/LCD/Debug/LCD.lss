
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fa  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000351  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000261  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  7a:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_config>:
#include <util/delay.h>

void lcd_config(uint8_t cmd)
{
	//1. Set RS Pin to 0
	PORTC = 0b00000000;
  82:	15 ba       	out	0x15, r1	; 21
	//2. Upload the command on PORTD
	PORTD = cmd;
  84:	82 bb       	out	0x12, r24	; 18
	//3. Generate a Latch signal 0-1-0
	PORTC = 0b00000010;
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_config+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_config+0x12>
  94:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000000;
  96:	15 ba       	out	0x15, r1	; 21
  98:	8f e1       	ldi	r24, 0x1F	; 31
  9a:	9e e4       	ldi	r25, 0x4E	; 78
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_config+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_config+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_character>:
	_delay_ms(10);
}
void lcd_character(char ch)
{
	//1. Set RS Pin to 1
	PORTC = 0b00000001;
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	95 bb       	out	0x15, r25	; 21
	//2. Upload the character on PORTD
	PORTD = ch;
  aa:	82 bb       	out	0x12, r24	; 18
	//3. Generate a Latch signal 0-1-0
	PORTC = 0b00000011;
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	fe e4       	ldi	r31, 0x4E	; 78
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_character+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_character+0x14>
  ba:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000001;
  bc:	95 bb       	out	0x15, r25	; 21
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_character+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_character+0x22>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <lcd_setup>:
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	82 e5       	ldi	r24, 0x52	; 82
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <lcd_setup+0x6>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_setup+0x10>
  dc:	00 00       	nop
void lcd_setup()
{
	//1. Wait for 300ms to let LCD turn ON
	_delay_ms(300);
	//2. Set the LCD mode to 8-bit 16 character and 2 rows
	lcd_config(0x38);
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	//16x1 -> 0x30
	//3. Set the Writing Style (Left -> Right)
	lcd_config(0x06);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	// Right-> Left  0x04
	//4. Set the Cursor Style (a. Solid, b. Blinking, c. OFF)
	lcd_config(0x0E);
  ea:	8e e0       	ldi	r24, 0x0E	; 14
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	// 0x0E -> Solid
	// 0x0F -> Blinking
	// 0x0C -> OFF
	//5. Clear the garbage values on LCD Screen
	lcd_config(0x01);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
	//6. Set the Home Location
	lcd_config(0x80);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
  fc:	08 95       	ret

000000fe <lcd_print>:
}

void lcd_print(char *data)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
	while (*data != '\0')
 104:	03 c0       	rjmp	.+6      	; 0x10c <lcd_print+0xe>
	{
		lcd_character(*data);
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_character>
		data++;
 10a:	21 96       	adiw	r28, 0x01	; 1
	lcd_config(0x80);
}

void lcd_print(char *data)
{
	while (*data != '\0')
 10c:	88 81       	ld	r24, Y
 10e:	81 11       	cpse	r24, r1
 110:	fa cf       	rjmp	.-12     	; 0x106 <lcd_print+0x8>
	{
		lcd_character(*data);
		data++;
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <main>:

int main(void)
{
	DDRC = 0b00000011;// EN RS
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;// D7..D0
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	81 bb       	out	0x11, r24	; 17
	lcd_setup();
 120:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_setup>
    while (1) 
    {
	    lcd_config(0x80);
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
		lcd_print("Hello SUDHESH");
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_print>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x20>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x2a>
 142:	00 00       	nop
		_delay_ms(1000);
		lcd_config(0xC0);
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_config>
		lcd_print("Hi!! Renu");
 14a:	8e e6       	ldi	r24, 0x6E	; 110
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_print>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	89 e6       	ldi	r24, 0x69	; 105
 156:	98 e1       	ldi	r25, 0x18	; 24
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x40>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x4a>
 162:	00 00       	nop
 164:	df cf       	rjmp	.-66     	; 0x124 <main+0xc>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>

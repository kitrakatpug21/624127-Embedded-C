
Motor Car Using Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c6  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054c  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021b  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fd  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRA = 0b11000011;// Motor 
  6c:	83 ec       	ldi	r24, 0xC3	; 195
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000000;// Switch is Connected Here at PC0
  70:	14 ba       	out	0x14, r1	; 20
	int count = 0;
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
	while (1) 
    {
		if (PINC & (0b00000001))
  76:	98 9b       	sbis	0x13, 0	; 19
  78:	09 c0       	rjmp	.+18     	; 0x8c <main+0x20>
		{
			while(PINC & (0b00000001))
  7a:	98 99       	sbic	0x13, 0	; 19
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
			{
				// wait here for debouncer
			}
			
			if (count == 4)
  7e:	84 30       	cpi	r24, 0x04	; 4
  80:	91 05       	cpc	r25, r1
  82:	11 f0       	breq	.+4      	; 0x88 <main+0x1c>
				count = 0;
			else
				count = count + 1;
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0x20>
			{
				// wait here for debouncer
			}
			
			if (count == 4)
				count = 0;
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
			else
				count = count + 1;
		}
		if (count == 1)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 05       	cpc	r25, r1
  90:	19 f4       	brne	.+6      	; 0x98 <main+0x2c>
		{
			PORTA = 0b11000000; //MOTOR M1 and M2 Forward
  92:	20 ec       	ldi	r18, 0xC0	; 192
  94:	2b bb       	out	0x1b, r18	; 27
  96:	ef cf       	rjmp	.-34     	; 0x76 <main+0xa>
		}
		else if (count == 2)
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	91 05       	cpc	r25, r1
  9c:	19 f4       	brne	.+6      	; 0xa4 <main+0x38>
		{
			PORTA = 0b00000011; //MOTOR M1 and M2 Backward
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	2b bb       	out	0x1b, r18	; 27
  a2:	e9 cf       	rjmp	.-46     	; 0x76 <main+0xa>
		}
		else if (count == 3)
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	91 05       	cpc	r25, r1
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x44>
		{
			PORTA = 0b01000000; //MOTOR M1 is Forward and M2 OFF
  aa:	20 e4       	ldi	r18, 0x40	; 64
  ac:	2b bb       	out	0x1b, r18	; 27
  ae:	e3 cf       	rjmp	.-58     	; 0x76 <main+0xa>
		}
		else if (count == 4)
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	91 05       	cpc	r25, r1
  b4:	19 f4       	brne	.+6      	; 0xbc <main+0x50>
		{
			PORTA = 0b10000000; //MOTOR M2 is Forward and M1 OFF
  b6:	20 e8       	ldi	r18, 0x80	; 128
  b8:	2b bb       	out	0x1b, r18	; 27
  ba:	dd cf       	rjmp	.-70     	; 0x76 <main+0xa>
		}
		else
		{
			PORTA = 0b00000000; //MOTOR M2 and M1 OFF
  bc:	1b ba       	out	0x1b, r1	; 27
  be:	db cf       	rjmp	.-74     	; 0x76 <main+0xa>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

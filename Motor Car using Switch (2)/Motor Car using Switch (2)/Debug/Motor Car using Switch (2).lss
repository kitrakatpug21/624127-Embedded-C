
Motor Car using Switch (2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000118f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRA = 0b11000011;// Motor 
  6c:	83 ec       	ldi	r24, 0xC3	; 195
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000000;// Switch is Connected Here at PC0, PC1, PC2, PC3
  70:	14 ba       	out	0x14, r1	; 20
	while (1) 
    {
		if (PINC & (0b00000001))
  72:	98 9b       	sbis	0x13, 0	; 19
  74:	03 c0       	rjmp	.+6      	; 0x7c <main+0x10>
		{
			PORTA = 0b11000000; //MOTOR M1 and M2 Forward
  76:	80 ec       	ldi	r24, 0xC0	; 192
  78:	8b bb       	out	0x1b, r24	; 27
  7a:	fb cf       	rjmp	.-10     	; 0x72 <main+0x6>
		}
		else if (PINC & (0b00001000))
  7c:	9b 9b       	sbis	0x13, 3	; 19
  7e:	03 c0       	rjmp	.+6      	; 0x86 <main+0x1a>
		{
			PORTA = 0b00000011; //MOTOR M1 and M2 Backward
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	8b bb       	out	0x1b, r24	; 27
  84:	f6 cf       	rjmp	.-20     	; 0x72 <main+0x6>
		}
		else if (PINC & (0b00000100))
  86:	9a 9b       	sbis	0x13, 2	; 19
  88:	03 c0       	rjmp	.+6      	; 0x90 <main+0x24>
		{
			PORTA = 0b01000000; //MOTOR M1 is Forward and M2 OFF
  8a:	80 e4       	ldi	r24, 0x40	; 64
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	f1 cf       	rjmp	.-30     	; 0x72 <main+0x6>
		}
		else if (PINC & (0b00000010))
  90:	99 9b       	sbis	0x13, 1	; 19
  92:	03 c0       	rjmp	.+6      	; 0x9a <main+0x2e>
		{
			PORTA = 0b10000000; //MOTOR M2 is Forward and M1 OFF
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	8b bb       	out	0x1b, r24	; 27
  98:	ec cf       	rjmp	.-40     	; 0x72 <main+0x6>
		}
		else
		{
			PORTA = 0b00000000; //MOTOR M2 and M1 OFF
  9a:	1b ba       	out	0x1b, r1	; 27
  9c:	ea cf       	rjmp	.-44     	; 0x72 <main+0x6>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>

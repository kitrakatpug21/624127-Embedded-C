
Relay Interfacing With ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000644  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
	DDRC = 0b10001111;
  6c:	8f e8       	ldi	r24, 0x8F	; 143
  6e:	84 bb       	out	0x14, r24	; 20
	/*
	Relay at PC7, 
	Fans at PC0 and PC2
	*/
	ADMUX = 0b01000011;
  70:	83 e4       	ldi	r24, 0x43	; 67
  72:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	86 b9       	out	0x06, r24	; 6
	while (1)
	{
		ADCSRA = ADCSRA | 0b01000000;// 0b11000110;
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA & 0b00010000)==0)
  7e:	34 9b       	sbis	0x06, 4	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
		{
			// wait till conversion is complete
		}
		//Switch The Compressor and Fan(s) of the AC using ADC values
		if (ADC > 62 && ADC < 103)
  82:	84 b1       	in	r24, 0x04	; 4
  84:	95 b1       	in	r25, 0x05	; 5
  86:	cf 97       	sbiw	r24, 0x3f	; 63
  88:	40 f0       	brcs	.+16     	; 0x9a <main+0x2e>
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	95 b1       	in	r25, 0x05	; 5
  8e:	87 36       	cpi	r24, 0x67	; 103
  90:	91 05       	cpc	r25, r1
  92:	18 f4       	brcc	.+6      	; 0x9a <main+0x2e>
		{
			// if temperature is beyond 30 Deg and within 50 Deg
			// turn both Compressor and FAN-1 and FAN-2 as ON
			PORTC = 0b10000101;
  94:	85 e8       	ldi	r24, 0x85	; 133
  96:	85 bb       	out	0x15, r24	; 21
  98:	17 c0       	rjmp	.+46     	; 0xc8 <main+0x5c>
		}
		else if (ADC > 40 && ADC <= 62)
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	89 97       	sbiw	r24, 0x29	; 41
  a0:	38 f0       	brcs	.+14     	; 0xb0 <main+0x44>
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	cf 97       	sbiw	r24, 0x3f	; 63
  a8:	18 f4       	brcc	.+6      	; 0xb0 <main+0x44>
		{
			// if temperature is within 30 Deg and 20 Deg
			// turn both Compressor and FAN-1 as ON
			PORTC = 0b10000001;
  aa:	81 e8       	ldi	r24, 0x81	; 129
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <main+0x5c>
		}
		else if (ADC > 24 && ADC <= 40)
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	49 97       	sbiw	r24, 0x19	; 25
  b6:	38 f0       	brcs	.+14     	; 0xc6 <main+0x5a>
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	89 97       	sbiw	r24, 0x29	; 41
  be:	18 f4       	brcc	.+6      	; 0xc6 <main+0x5a>
		{
			// if temperature is within 20 Deg and 12 Deg
			// turn only FAN-1 as ON
			PORTC = 0b00000001;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <main+0x5c>
		}
		else
		{
			// otherwise for remaining cases, everything will be turned off
			PORTC = 0b00000000;
  c6:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	84 e3       	ldi	r24, 0x34	; 52
  cc:	9c e0       	ldi	r25, 0x0C	; 12
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
  da:	ce cf       	rjmp	.-100    	; 0x78 <main+0xc>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
